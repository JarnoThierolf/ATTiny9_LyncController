
EN0077_Lync.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800040  000000ac  00000140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800040  00800040  00000140  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000015a  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000102  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000158  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a7  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009b  00000000  00000000  00000737  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000007d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	44 c0       	rjmp	.+136    	; 0x8c <__vector_1>
   4:	17 c0       	rjmp	.+46     	; 0x34 <__bad_interrupt>
   6:	16 c0       	rjmp	.+44     	; 0x34 <__bad_interrupt>
   8:	15 c0       	rjmp	.+42     	; 0x34 <__bad_interrupt>
   a:	14 c0       	rjmp	.+40     	; 0x34 <__bad_interrupt>
   c:	13 c0       	rjmp	.+38     	; 0x34 <__bad_interrupt>
   e:	12 c0       	rjmp	.+36     	; 0x34 <__bad_interrupt>
  10:	11 c0       	rjmp	.+34     	; 0x34 <__bad_interrupt>
  12:	10 c0       	rjmp	.+32     	; 0x34 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 27       	eor	r17, r17
  16:	1f bf       	out	0x3f, r17	; 63
  18:	cf e5       	ldi	r28, 0x5F	; 95
  1a:	d0 e0       	ldi	r29, 0x00	; 0
  1c:	de bf       	out	0x3e, r29	; 62
  1e:	cd bf       	out	0x3d, r28	; 61

00000020 <__do_clear_bss>:
  20:	20 e0       	ldi	r18, 0x00	; 0
  22:	a0 e4       	ldi	r26, 0x40	; 64
  24:	b0 e0       	ldi	r27, 0x00	; 0
  26:	01 c0       	rjmp	.+2      	; 0x2a <.do_clear_bss_start>

00000028 <.do_clear_bss_loop>:
  28:	1d 93       	st	X+, r17

0000002a <.do_clear_bss_start>:
  2a:	a1 34       	cpi	r26, 0x41	; 65
  2c:	b2 07       	cpc	r27, r18
  2e:	e1 f7       	brne	.-8      	; 0x28 <.do_clear_bss_loop>
  30:	02 d0       	rcall	.+4      	; 0x36 <main>
  32:	3a c0       	rjmp	.+116    	; 0xa8 <_exit>

00000034 <__bad_interrupt>:
  34:	e5 cf       	rjmp	.-54     	; 0x0 <__vectors>

00000036 <main>:

uint8_t cliFlag = 0;

int main(void)
{
	DDRB = 0x01;			//PB0-lync output, PB1-call + PB2-hook are inputs 0b00000001
  36:	41 e0       	ldi	r20, 0x01	; 1
  38:	41 b9       	out	0x01, r20	; 1
	PORTB = 0x00;			//all pull-ups off
  3a:	12 b9       	out	0x02, r17	; 2
	
	EIMSK = (1 << INT0);	//activate external interrupt INT0 (if I-bit is set)
  3c:	43 bb       	out	0x13, r20	; 19
	EICRA = (1 << ISC00);	//Any logical change on INT0 generates an interrupt request.
  3e:	45 bb       	out	0x15, r20	; 21
	
    while(1)
    {
		if (cliFlag == 0)
  40:	40 a1       	lds	r20, 0x40
  42:	41 13       	cpse	r20, r17
  44:	0d c0       	rjmp	.+26     	; 0x60 <__stack+0x1>
		{
			sei ();					// set I-bit (activate external interrupts in general)
  46:	78 94       	sei
			
			set_sleep_mode (SLEEP_MODE_PWR_DOWN);
  48:	4a b7       	in	r20, 0x3a	; 58
  4a:	41 7f       	andi	r20, 0xF1	; 241
  4c:	44 60       	ori	r20, 0x04	; 4
  4e:	4a bf       	out	0x3a, r20	; 58
			sleep_mode();			//Standby until external interrupt at input PB2
  50:	4a b7       	in	r20, 0x3a	; 58
  52:	41 60       	ori	r20, 0x01	; 1
  54:	4a bf       	out	0x3a, r20	; 58
  56:	88 95       	sleep
  58:	4a b7       	in	r20, 0x3a	; 58
  5a:	4e 7f       	andi	r20, 0xFE	; 254
  5c:	4a bf       	out	0x3a, r20	; 58
  5e:	f0 cf       	rjmp	.-32     	; 0x40 <__SREG__+0x1>
		}
		else
		{
			cli();					// del I-bit (deactivate external interrupts in general)
  60:	f8 94       	cli
			
			uint8_t callState = (PINB & (1 << call));
  62:	40 b1       	in	r20, 0x00	; 0
			uint8_t hookState = (PINB & (1 << hook));
  64:	50 b1       	in	r21, 0x00	; 0
  66:	54 70       	andi	r21, 0x04	; 4

			if(((!callState) && hookState) || (callState && (!hookState)))	//callState XOR hookState
  68:	41 fd       	sbrc	r20, 1
  6a:	03 c0       	rjmp	.+6      	; 0x72 <__stack+0x13>
  6c:	51 13       	cpse	r21, r17
  6e:	03 c0       	rjmp	.+6      	; 0x76 <__stack+0x17>
  70:	0b c0       	rjmp	.+22     	; 0x88 <__stack+0x29>
  72:	51 13       	cpse	r21, r17
  74:	09 c0       	rjmp	.+18     	; 0x88 <__stack+0x29>
			{
				PORTB |= (1 << lync);		//set PB0 high
  76:	10 9a       	sbi	0x02, 0	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  78:	47 ea       	ldi	r20, 0xA7	; 167
  7a:	51 e6       	ldi	r21, 0x61	; 97
  7c:	41 50       	subi	r20, 0x01	; 1
  7e:	50 40       	sbci	r21, 0x00	; 0
  80:	e9 f7       	brne	.-6      	; 0x7c <__stack+0x1d>
  82:	00 c0       	rjmp	.+0      	; 0x84 <__stack+0x25>
  84:	00 00       	nop
				_delay_ms(100);				//impulse and debouncing time
				PORTB &= ~(1 << lync);		//set PB0 low
  86:	10 98       	cbi	0x02, 0	; 2
			else
			{
				//do nothing
			}
			
			cliFlag = 0;					//reset -> Interrupts on and sleep
  88:	10 a9       	sts	0x40, r17
  8a:	da cf       	rjmp	.-76     	; 0x40 <__SREG__+0x1>

0000008c <__vector_1>:
		}
    }
}

ISR(INT0_vect)		//extern interrupt for PB2 on every hook change
{
  8c:	1f 93       	push	r17
  8e:	0f 93       	push	r16
  90:	0f b7       	in	r16, 0x3f	; 63
  92:	0f 93       	push	r16
  94:	10 e0       	ldi	r17, 0x00	; 0
  96:	4f 93       	push	r20
	cliFlag = 1;	//set cliFlag to start impulse and for avoiding bouncing at input
  98:	41 e0       	ldi	r20, 0x01	; 1
  9a:	40 a9       	sts	0x40, r20
  9c:	4f 91       	pop	r20
  9e:	0f 91       	pop	r16
  a0:	0f bf       	out	0x3f, r16	; 63
  a2:	0f 91       	pop	r16
  a4:	1f 91       	pop	r17
  a6:	18 95       	reti

000000a8 <_exit>:
  a8:	f8 94       	cli

000000aa <__stop_program>:
  aa:	ff cf       	rjmp	.-2      	; 0xaa <__stop_program>
